pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- dolan's cadillac
--    picostevemo

-- globals

-- make an oop-like object.
-- see www.lexaloffle.com/bbs/?tid=49047
function obj(t)
 return setmetatable(t,
  {__index=_ENV})
end

function clamp(x,low,hi)
 return max(low,min(hi,x))
end

function spr_addr(sid)
 return 512*(sid\16)+4*(sid%16)
end

function sprxy(sid)
 return 8*(sid%16),8*(sid\16)
end

-- i don't love this easing function,
-- but it'll work for now
function easeoutback(x,a,b)
 local t=clamp((x-a)/(b-a),0,1)
 local c1=1.70158
 local c3=c1+1
 local t1=t-1
 return 1+c3*t1*t1*t1+c1*t1*t1
end


function collides(collmasks,px,py)
 -- if offscreen, assume
 -- infinite road
 if px<0 or px>127 or
    py<0 or py>127 then
  return py>=(16-k_board_h)*8
 end
 local bit,row=px\8,1+py\8
 local m=collmasks[row]
 return m&(1<<bit)~=0
end


-- fade table generated by http://kometbomb.net/pico8/fadegen.html
-- fade(0) fades to the target color
-- fade() or fade(fade_max_step) applies no fade
fade_max_step=14
--fade_target_color=0
function fade(step)
 step=(step or fade_max_step)\1
 local tbl="00000000000000000000000000000000000000000000808080808000818080800000800080808082808080008180808000008081808082858080808181818285000080818080850580808581018182850081808180800505828484818382850500818081828005058484840383850205008182818482058684840403838502050081828384828d86840404038c058d860081828384850d86880404038c058d860081828384850d8688048a8b8c0586860081828384850d0688048a8b8c8d8686008102038485860688098a8b0c8d0e8f000102030405060608090a8b0c0d0e8f000102030405060708090a0b0c0d0e0f"
 local b=1+32*(step<fade_max_step and step or fade_max_step)
 for c=0,15 do
  pal(c,tonum(sub(tbl,b,b+1),1),1)
  b+=2
 end
end

-- creates an animation from a
-- list of values and frame counts.
-- one anim per running instance (all frames & counts will be stored per-instance)
-- a:nextv() increments the frame counter and returns the value for the new frame.
--       or nil when there are no frames remaining
-- if fcounts is a number,each value's fcount is that number.
-- if fcounts is omitted, each value's fcount is 1.
function anim(values,fcounts)
 return {
  vals=values,
  fc=fcounts or 1,
  fcit=type(fcounts)=="table",
  i=0,
  c=1,
  nextv=function(_ENV)
   -- todo: prevent wraparound
   -- error after anim ends.
   c-=1
   if c==0 then
    i+=1
    c=fcit and fc[i] or fc
   end
   return vals[i]
  end,
  rewind=function(_ENV)
   i,c=0,1
  end
 }
end
-- create a graph of interconnected
-- animation states.
-- each entry in state is a table with
-- two entries: {anim,next_state}
function animgraph(states,start_state)
 return {
  states=states,
  s=states[start_state],
  nextv=function(_ENV)
   local v=s[1]:nextv()
   while not v do
    s=states[s[2]]
    s[1]:rewind()
    v=s[1]:nextv()
   end
   return v
  end,
  to=function(_ENV,new_state)
   s=states[new_state]
   s[1]:rewind()
  end,
 }
end

-- sprite rotation c/o https://www.lexaloffle.com/bbs/?tid=38548
--97 tokens with scaling and arbitrary size
function rspr(x,y,rot,mx,my,w,flip,scale)
 scale=scale or 1
 w*=scale*4
 local cs, ss = cos(rot)*.125/scale,sin(rot)*.125/scale
 local sx, sy = mx+cs*-w, my+ss*-w
 local hx = flip and -w or w
 local halfw = -w
 for py=y-w, y+w do
  tline(x-hx, py, x+hx, py, sx-ss*halfw, sy+cs*halfw, cs, ss)
  halfw+=1
 end
end

-- constants
k_board_w=10
k_board_h=8
-- sounds
sfx_click=0
sfx_select=1
sfx_cancel=2
sfx_dope1=3
sfx_shoot=4
-- sprite ids
sid_empty=16
sid_invisible=32 -- looks empty, but treated as occupied
sid_gems={5,21,37,53}
sid_rock1=25
sid_rock2a=7
sid_rock2b=8
sid_rock2c=23
sid_rock2d=24
sid_cloud1=65
sid_cloud2=67
sid_cloud3=68
sid_car=129
sid_car_bumper2=141
sid_car_debris={170,171,172,186,187,188}
sid_digging={1,33,3,35,11,43,13,45}
sid_running={103,71,71,71,71,71,71,103}
sid_sun=101
sid_dirt_pile=65
sid_walking={67,68}
sid_dolan_head=137
sid_filldirt={80,96,112}
sid_fillroad=56
-- rotating sprite map locations
m_wheelx,m_wheely,m_wheelw=18,5,2
m_armx,m_army,m_armw=21,5,2
-- sprite flags
sf_rock=0
sf_empty=1
-- constants
palt_default=0x0040

-- game modes
-- don't edit these directly;
-- call set_next_mode() instead.
modes={}
game_mode=""
next_mode=""
next_mode_enter_args={}

-- switch to a new game mode.
-- args is passed to the new
-- mode's enter() function.
--
-- the transition takes place
-- on the frame following the
-- one in which this function
-- is called.
function set_next_mode(mode,args)
 next_mode=mode
 next_mode_enter_args=args
end

function _init()
 modes={
  menu={
   enter=menu_enter,
   obj=mm,
  },
  match3={
   enter=match3_enter,
   obj=nil,
  },
  carfall={
   enter=cf_enter,
   obj=nil,
  },
  carbury={
   enter=cb_enter,
   obj=nil,
  },
  gameover={
   enter=go_enter,
   obj=nil,
  },
  victory={
   enter=vt_enter,
   obj=nil,
  },
 }
 game_mode="menu"
 next_mode=game_mode
 next_mode_enter_args=nil
 --printh("****************")
 palt(palt_default) -- orange transparent by default
 cls(0)
 bg_init()
 modes[game_mode].obj=
  modes[game_mode].enter()
end

function _update60()
 modes[game_mode].obj:update()
end

function _draw()
 modes[game_mode].obj:draw()
 --print(game_mode,1,1,0)
 if next_mode~=game_mode then
  game_mode=next_mode
  modes[game_mode].obj=
   modes[game_mode].enter(next_mode_enter_args)
 end
end
-->8
-- match3 mode
m3={}

function match3_enter()
 m3=obj({
  update=match3_update,
  draw=match3_draw,
  clear_matches=clear_matches,
  settle_grid=settle_grid,
  mode_timer=0,
  mode_timer_max=60*60,
  w=k_board_w,
  h=k_board_h,
  bx=-100,
  by=(16-k_board_h)*8,
  scrollx=2,
  interactive=false,
  crs_fills={
   0x1107.26e1,0x1107.4678,
   0x1107.8764,0x1107.1e62},
  crs_t=0,
  cx=1,
  cy=1,
  -- use mi=2*dx+dy+3 to index
  --   l=1  u=2  z=3  d=4  r=5
  -- 6 and 7 are tile offsets to
  -- rock nw corner.
  -- 8 is cursor size in pixels
  rock_mdists={
   [sid_rock1]={1,1,0,1,1,0,0,7},
   [sid_rock2a]={1,1,0,2,2,0,0,15},
   [sid_rock2b]={2,1,0,2,1,-1,0,15},
   [sid_rock2c]={1,2,0,1,2,0,-1,15},
   [sid_rock2d]={2,2,0,1,1,-1,-1,15},
  },
  grid={},
  yoffs={},
  pgems={},
  selecting=false,
  settling=false,
  digger_ag=animgraph({
   dig={anim(sid_digging,4),"dig"},
  },"dig"),
  dirtx=4,
  dirth=0,
  clampx=function(this,x)
   return max(1,min(this.w,x))
  end,
  clampy=function(this,y)
   return max(1,min(this.h,y))
  end,
 })
 -- populate grid
 for y=1,m3.h do
  local row,yoffs={},{}
  for x=1,m3.w do
   add(row,rnd(sid_gems))
   add(yoffs,0)
  end
  add(m3.grid,row)
  add(m3.yoffs,yoffs)
 end
 -- iterate until no matches
 while m3:clear_matches(true)>0 do
  m3.settling=false
  m3.dirth=0
  for y=1,m3.h do
   for x=1,m3.w do
    m3.yoffs[y][x]=0
    if m3.grid[y][x]==sid_empty then
     m3.grid[y][x]=rnd(sid_gems)
    end
   end
  end
 end
 -- todo: place rocks
 m3.grid[1][3]=sid_rock1
 m3.grid[1][6]=sid_rock2a
 m3.grid[1][7]=sid_rock2b
 m3.grid[2][6]=sid_rock2c
 m3.grid[2][7]=sid_rock2d
 return m3
end

-- returns the number of matches
function clear_matches(_ENV,skip_fx)
 local mtotal=0
 for y=1,h do
  local row=grid[y]
  for x=1,w do
   local s=row[x]
   if s==sid_empty then goto match_end end
   local n=1 -- find x match
   for mx=x+1,w do
    if (row[mx]~=s) break
    n+=1
   end
   if n>=3 then -- x matched
    mtotal+=1
    for mx=x,x+n-1 do
     yoffs[y][mx]=-1
    end
   end
   n=1 -- find y match
   for my=y+1,h do
    if (grid[my][x]~=s) break
    n+=1
   end
   if n>=3 then -- y matched
    mtotal+=1
    for my=y,y+n-1 do
     yoffs[my][x]=-1
    end
   end
   ::match_end::
   end
 end
 dirth+=3*mtotal
 if mtotal>0 then
  for y=1,h do
   for x=1,w do
    if yoffs[y][x]==-1 then
     if not skip_fx then
      add(pgems,{
       s=grid[y][x],
       px=bx+8*x,
       py=by+8*y,
       vx=-3+rnd(2),
       vy=-10+rnd(4),
      })
     end
     grid[y][x]=sid_empty
     yoffs[y][x]=0
    end
   end
  end
  if (not skip_fx) sfx(sfx_dope1,0)
  settling=true
 end
 return mtotal
end

function settle_grid(_ENV)
 if settling then
  local scount=0
  for y=1,h do
   for x=1,w do
    -- if not empty and not moving,
    -- see if we should fall.
    -- todo: handle 2x2 rocks.
    -- they should only fall if
    -- both halves are above
    -- empty cells.
    local g=grid[y][x]
    if g==sid_rock2a and
       yoffs[y][x]==0 then
     if y+1<h and
        grid[y+2][x]==sid_empty and
        grid[y+2][x+1]==sid_empty then
      grid[y+1][x]=sid_rock2a
      grid[y+1][x+1]=sid_rock2b
      grid[y+2][x]=sid_rock2c
      grid[y+2][x+1]=sid_rock2d
      grid[y][x]=sid_empty
      grid[y][x+1]=sid_empty
      yoffs[y+1][x]=7
      yoffs[y+1][x+1]=7
      yoffs[y+2][x]=7
      yoffs[y+2][x+1]=7
      scount+=1
     end
    elseif g~=sid_empty and
           g~=sid_rock2b and
           g~=sid_rock2c and
           g~=sid_rock2d and
           yoffs[y][x]==0 then
     if y<h and
        grid[y+1][x]==sid_empty then
      grid[y+1][x]=g
      grid[y][x]=sid_empty
      yoffs[y+1][x]=7
      scount+=1
     end
    -- if already falling, keep
    -- falling.
    elseif yoffs[y][x]>0 then
     yoffs[y][x]-=1
     scount+=1
    end
   end
  end
  if scount==0 then
   settling=false
   m3:clear_matches()
  end
 end
end

function match3_update(_ENV)
 -- debug temp
 if btnp(❎) then
  mode_timer=mode_timer_max
 end
 -- update timer/sun
 mode_timer+=1
 if mode_timer>=mode_timer_max then
  set_next_mode("carfall",{
   grid=grid,
   w=w,
   h=h,
   bx=bx,
   by=by,
   runnerx=bx-16+8*cx,
   dirtx=dirtx,
   dirth=dirth,
  })
 end
 local mode_t=mode_timer/mode_timer_max
 sunx=-20+148*(mode_t)
 suny=16+8*cos(mode_t)
 -- scroll
 if bx<24 then
  bx=min(24,bx+scrollx)
 else
  interactive=true
  scrollx=0
 end
 bg:update(scrollx)
 if (not interactive) return
 m3:settle_grid()
 -- update gem particles
 local outg={}
 for g in all(pgems) do
  g.px+=g.vx
  g.py+=g.vy
  g.vy+=1
  if g.px>-8 and g.py<128 then
   add(outg,g)
  end
 end
 pgems=outg
 -- select or cancel selection
 if btnp(🅾️) then
  if not selecting
    and not settling
    and grid[cy][cx]~=sid_empty then
   sfx(sfx_select,0)
   selecting=true
  elseif selecting then
   selecting=false
   sfx(sfx_cancel,0)
  end
 end
 -- look up rock under cursor
 -- (default to rock1)
 local sg=grid[cy][cx]
 local isrock=fget(sg,sf_rock)
 local r=rock_mdists[
         isrock and sg
                 or sid_rock1]
 -- move cursor
 local dx,dy=0,0
 if btnp(⬆️) then dy-=1 end
 if btnp(⬇️) then dy+=1 end
 if btnp(⬅️) then dx-=1 end
 if btnp(➡️) then dx+=1 end
 if (dx~=0) dy=0 -- no diagonals!
 local mi=2*dx+dy+3
 local mdist=mi~=0 and r[mi]
 local cx2=m3:clampx(cx+dx*mdist)
 local cy2=m3:clampy(cy+dy*mdist)
 if cx2~=cx or cy2~=cy then
  local move_snd=sfx_click
  -- swap gems before moving cursor
  if selecting then
   selecting=false
   if sg==sid_rock1 then
    -- only swap if dest cell is empty
    if grid[cy2][cx2]==sid_empty then
     grid[cy][cx]=sid_empty
     grid[cy2][cx2]=sg
     settling=true
    else
     move_snd=sfx_cancel
    end
   elseif isrock then -- 2x2 rock
    -- get upper-left block coords
    local bx,by=cx+r[6],cy+r[7]
    -- get coords for cells to check for empty
    local ex,ey=bx+dx+(dx>0 and 1 or 0),
                by+dy+(dy>0 and 1 or 0)
    local ex2,ey2=ex+abs(dy),
                  ey+abs(dx)
    -- only swap if both dest cells are empty
    if grid[ey][ex]==sid_empty and
       grid[ey2][ex2]==sid_empty then
     grid[by][bx]=sid_empty
     grid[by][bx+1]=sid_empty
     grid[by+1][bx]=sid_empty
     grid[by+1][bx+1]=sid_empty
     bx+=dx
     by+=dy
     grid[by][bx]=sid_rock2a
     grid[by][bx+1]=sid_rock2b
     grid[by+1][bx]=sid_rock2c
     grid[by+1][bx+1]=sid_rock2d
     cx2,cy2=cx+dx,cy+dy -- only move one tile
     settling=true
    else
     move_snd=sfx_cancel
    end
   elseif fget(grid[cy2][cx2],sf_rock) then
    move_snd=sfx_cancel
   else
	   grid[cy][cx]=grid[cy2][cx2]
	   grid[cy2][cx2]=sg
	   move_snd=nil
	   -- revert if not a match
	   if m3:clear_matches()==0 then
	    grid[cy2][cx2]=grid[cy][cx]
	    grid[cy][cx]=sg
	    move_snd=sfx_cancel
	   end
	  end
  end
  cx,cy=cx2,cy2
  if (move_snd) sfx(move_snd,0)
 end
end

function match3_draw(_ENV)
 -- draw bg
 bg:draw()
 -- draw board
 map(2,0,bx-8,by,w+2,h)
 local gby=by
 for y=1,h do
  local gbx=bx
  for x=1,w do
   local s=grid[y][x]
   if interactive then
    spr(s,gbx,gby-yoffs[y][x])
   else
    -- fancy more expensive draw
    local sx,sy=sprxy(grid[y][x])
    local sz=8*easeoutback(gbx-4*(w-x)-4*y,-40,8)
    sspr(sx,sy,8,8,
         gbx+0.5*(8-sz),gby-yoffs[y][x]+0.5*(8-sz),sz,sz)
   end
   gbx+=8
  end
  gby+=8
 end
 -- draw cursor
 if interactive then
  poke(0x5f34,1) -- color.fill mode
  local sg=grid[cy][cx]
  local isrock=fget(sg,sf_rock)
  local r=rock_mdists[
          isrock and sg
                  or sid_rock1]
  local crx,cry=bx+8*(cx+r[6])-8,
                by+8*(cy+r[7])-8
  
  crs_t = selecting
          and 1+crs_t%4 or 1
  rect(crx,cry,crx+r[8],cry+r[8],
       crs_fills[crs_t])
  poke(0x5f34,0)
  fillp()
 end
 -- draw diggin' dude
 spr(digger_ag:nextv(),
     bx-12+8*cx,by-16,2,2)
 -- draw dirt pile
 local dsx,dsy=sprxy(sid_dirt_pile)
 sspr(dsx,dsy,16,16,dirtx,by,
      16,-dirth/3,false,true)
 -- draw particle gems
 for g in all(pgems) do
  spr(g.s,g.px,g.py)
 end
 -- debug
 print("temp: press ❎ to\nforce car to arrive",1,1,0)
end
-->8
-- main menu
mm={}

function menu_enter()
 cls(0)
 mm=obj({
  update=menu_update,
  draw=menu_draw,
  scrollx=1,
  titlex=32,
  titley=12,
  carx=32,
  cary=8*(16-k_board_h)-25,
  wheel_r=0,
  fade_step=0,
 })
 --music(0,2000)
 return mm
end

function menu_update(_ENV)
 carx+=scrollx-1
 titlex+=scrollx-1
 fade_step=min(fade_max_step,
               fade_step+1)
 fade(fade_step)
 if carx>128 then
  set_next_mode("match3")
  fade()
 end
 bg:update(scrollx)
 wheel_r=(wheel_r+.1793)%1
 if btnp(🅾️) and scrollx<2 then
  sfx(sfx_dope1,0)
  scrollx=2
 end
 -- tmp music experiment:
 -- remove loop end from current
 -- music pattern
 if btnp(❎) then
  poke(0x3101,0x42)
 end
end

function menu_draw(_ENV)
 -- background
 bg:draw()
 -- car
 local cardx=2
 -- add a bit of random wheel bumpiness
 local w1y,w2y=rnd()<0.01 and 1 or 0,
               rnd()<0.01 and 1 or 0
 rspr(carx+11+cardx,
      cary+21-w1y,wheel_r,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 rspr(carx+47+cardx,
      cary+21-w2y,wheel_r+0.17,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 spr(sid_car,carx+cardx,
     cary,8,3)
 -- title
 --?"\^w\^t\f1\^j93dolan's\^j96\+cfcadillac\^j93\+ff\f9dolan's\^j96\+becadillac"
 print("\^w\^tdolan's",
       titlex+1+4,
       titley+1,1)
 print("\^w\^tdolan's",
       titlex+4,
       titley,9)
 print("\^w\^tcadillac",
       titlex+1,
       titley+12+1,1)
 print("\^w\^tcadillac",
       titlex,
       titley+12,9)
 -- menu
 if scrollx<2 then
  print("press 🅾️ to start",30,96,0)
  print("press 🅾️ to start",29,95,7)
 end
 -- debug
end
-->8
-- debug
function vardump(value,depth,key)
 local line_prefix=""
 local spaces=""
 if key~=nil then
  line_prefix="["..key.."] = "
 end
 if depth==nil then
  depth=0
 else
  depth+=1
  for i=1,depth do
   spaces=spaces.." "
  end
 end
 local t=type(value)
 if t=="table" then
  local mtable=getmetatable(value)
  if mtable then
   printh(spaces.."(metatable) ")
   value=mtable
  else
   printh(spaces..line_prefix.."(table) ")
  end
  for k,v in pairs(value) do
   vardump(v,depth,k)
  end
 elseif t=="function" then
  printh(spaces..line_prefix..
         "(function)")
 elseif t=="thread"
     or t=="userdata"
     or value==nil then
  printh(spaces..tostr(value))
 else
  printh(spaces..line_prefix..
         "("..t..") "..
         tostr(value))
 end
end

-- print a range of memory to
-- the console,one byte at a
-- time.
function pb(addr,n)
 n = n or 1
 for i=0,n-1 do
  printh(tostr(addr+i,1)..": 0x"..
         sub(tostr(peek(addr+i),1),5,6))
 end
end

-- overwrite the grid with a
-- specific pattern, to simplify
-- testing
function debug_grid(grid)
 local g,r,p,y=sid_gems[1],
               sid_gems[2],
               sid_gems[3],
               sid_gems[4]
 local a,b,c,d,e,_=sid_rock2a,
                   sid_rock2b,
                   sid_rock2c,
                   sid_rock2d,
                   sid_rock1,
                   sid_empty
 return {
 --[[ blank slate
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
  {_,_,_,_,_,_,_,_,_,_},
 --]]
  -- valid bury state
  {_,_,_,_,_,_,_,_,_,_},
  {g,_,_,_,_,_,_,_,_,r},
  {g,_,_,_,_,_,_,_,_,r},
  {p,_,_,_,_,_,_,_,_,g},
  {p,y,_,_,_,_,_,_,g,g},
  {g,y,g,_,r,_,_,_,y,y},
  {g,r,g,r,y,p,r,e,a,b},
  {g,r,y,r,y,p,r,g,c,d},
 }
end
-->8
-- background
bg={}

function bg_init()
 bg=obj({
  update=bg_update,
  draw=bg_draw,
  roadx1=0,
  roadx2=-128,
  cactx1=0,
  cactx2=-128,
  clouds={},
  sunx=-16,
  suny=0,
 })
 for i=1,16 do
  local x=16*i-128
  local bx,by=x+rnd(5)\1,rnd(48)\1
  local vx=0.03+rnd(0.002)
  for i=1,2+rnd(4)\1 do
   add(bg.clouds,{
    x=bx+rnd(3)\1,
    y=by+rnd(3)\1,
    w=10+rnd(5),
    h=2+rnd(4),
    vx=0.02,
    col=i<2 and 6 or 7,
   })
  end
 end
end

function bg_update(_ENV,dx)
 dx=dx or 0
 -- update clouds
 for c in all(clouds) do
  local _ENV=c
  x+=vx+0.25*dx
  if (x>=128) x-=256
 end
 -- update cacti
 cactx1+=0.5*dx
 if (cactx1>=128) cactx1-=256
 cactx2+=0.5*dx
 if (cactx2>=128) cactx2-=256
 -- update road
 roadx1+=1*dx
 if (roadx1>=128) roadx1-=256
 roadx2+=1*dx
 if (roadx2>=128) roadx2-=256
end

function bg_draw(_ENV)
 local h=k_board_h
 -- sky
 rectfill(0,0,127,8*(16-h),12)
 -- sun
 palt(0x0010)
 spr(sid_sun,sunx,suny,2,2)
 palt(palt_default)
 -- clouds
 for c in all(clouds) do
  ovalfill(c.x,c.y,c.x+c.w,c.y+c.h,c.col)
 end
 -- cacti
 map(16,0,cactx1,8*(14-h),16,2)
 map(16,0,cactx2,8*(14-h),16,2)
 -- road
 map(16,2,roadx1,8*(16-h),16,1)
 map(16,2,roadx2,8*(16-h),16,1)
 -- dirt
 rectfill(0,8*(16-h)+4,127,127,5)
end
-->8
-- car-falling
cf={}

function cf_enter(args)
 cf={
  bx=args.bx,
  by=args.by,
  w=args.w,
  h=args.h,
  grid=args.grid,
  runnerx=args.runnerx,
  dirtx=args.dirtx,
  dirth=args.dirth,
  runnery=args.by-16,
  runner_t=1,
  collmasks={},
  carx=128,
  cary=args.by-27, -- slightly above road
  carvx=-2,
  carvy=0,
  damaged=false,
  wheel_r=0,
  gravity=0.1,
  -- collision test points on
  -- car, relative to carx/y
  coll_pts={
   { 0, 8},{ 0,13},{ 0,18},{ 4,22},
   { 6,24},{ 9,26},{14,26},
   {17,21},
   {25,21},
   {33,21},{40,21},
   {42,23},{44,26},{50,26},
   {53,22},
   {58,22},{57, 8},{57,13},{58,19},
  },
  debris={},
 }
 -- construct 16x16 bitmask for
 -- entire screen for collision
 -- testing
 for y=1,16 do
  add(cf.collmasks,0x0000)
 end
 local tx0,ty0=1+cf.bx\8,
               1+cf.by\8
 for ty=1,cf.h do
  local mask=0xffff
  local row=ty+ty0-1 -- 1-based
  for tx=1,cf.w do
   if cf.grid[ty][tx]==sid_empty then
    local bit=tx+tx0-2 -- 0-based
    mask&=~(1<<bit)
   end
  end
  cf.collmasks[row]=mask
 end
end

function fill_car_cells()
 -- determine which grid cells
 -- are occupied by the car.
 local hull_pts={
  --{0,8},{8,8},{16,5},{21,0},{29,0},{37,0},{45,0},{52,0},{57,8},
  -- move points slightly inward
  -- to make sure a single pixel
  -- in a cell doesn't mark it as full
  {3,11},{10,10},{18,5},{22,2},{30,2},{38,2},{46,2},{52,2},{55,8},{55,16},{57,20},
 }
 local cbx,cby=cf.carx-cf.bx,cf.cary-cf.by
 local tx0,ty0=1+cf.bx\8,
               1+cf.by\8
 for p in all(hull_pts) do
  local px,py=cbx+p[1],cby+p[2]
  local gx,gy=1+px\8,1+py\8
  if gx>0 and gx<=cf.w and
     gy>0 and gy<=cf.h then
   for y=gy,cf.h do
    if cf.grid[y][gx]==sid_empty then
     -- update grid cell
     cf.grid[y][gx]=sid_invisible
     -- set bit in collmasks
     -- no, don't do this; it blocks
     -- bullets. only placed blocks
     -- should do that.
     --local row=y+ty0-1 -- 1-based
     --local bit=gx+tx0-2 -- 0-based
     --cf.collmasks[row]|=1<<bit
    end
   end
  else
   -- todo: this would indicate
   -- the car is not fully buried,
   -- so game over?
  end
 end
end

function update_debris()
 local inp=cf.debris
 local outp={}
 for p in all(inp) do
  p.px+=p.vx
  p.py+=p.vy
  p.vy+=1
  if p.px>-8 and p.py<128 then
   add(outp,p)
  end
 end
 cf.debris=outp
end

function cf_update()
 bg:update()
 update_debris()
 cf.wheel_r=(cf.wheel_r+0.17*cf.carvx)%1
 -- fall + collision checks
 -- x
 local carx2=cf.carx+cf.carvx
 local xfix=0
 for p in all(cf.coll_pts) do
  -- compute point and tile
  -- relative to gem grid
  local px,py=carx2+p[1],
            cf.cary+p[2]
  if collides(cf.collmasks,px,py) then
   -- collision
   -- compute how far px can go
   -- before it hits this tile.
   local px0=cf.carx+p[1]
   local pxs=cf.carvx<0
         and (px0&0xfff8)\1
         or  (px0|0x7)\1
   if abs(pxs-px)>abs(xfix) then
    xfix=pxs-px
   end
   -- spawn debris particles
   -- at higher velocities
   if abs(cf.carvx)>0.5 then
    local pcount=1+rnd(4)\1
    for i=1,pcount do
     add(cf.debris,{
      s=rnd(sid_car_debris),
      px=pxs,
      py=py,
      vx=cf.carvx,
      vy=-10+rnd(4),
     })
    end
   end
  end
 end
 if xfix~=0 then
  carx2+=xfix
  cf.damaged=true
  -- flip velocity
  cf.carvx*=-0.5
  if abs(cf.carvx)<0.25 then
   -- car is at rest.
   -- clamp to zero
   cf.carvx=0
   -- see if the car is deep
   -- enough to bury. if not,
   -- game over. otherwise
   -- advance to burying.
   local toprowclear=true
   for x=1,cf.w do
    if cf.grid[1][x]~=sid_empty then
     deepenough=false
     break
    end
   end
   if toprowclear and cf.cary>cf.by+6 then
    fill_car_cells()
    set_next_mode("carbury",{
     grid=cf.grid,
     collmasks=cf.collmasks,
     w=cf.w,
     h=cf.h,
     bx=cf.bx,
     by=cf.by,
     dirtx=cf.dirtx,
     dirth=cf.dirth,
     carx=cf.carx,
     cary=cf.cary,
     wheel_r=cf.wheel_r,
    })
   else
    set_next_mode("gameover",{
     reason="your pit wasn't deep enough",
     })
   end
  end
 end
 cf.carx=carx2
 -- y
 -- terminal velocity of 8 to avoid
 -- tunneling through an entire tile
 cf.carvy=min(8,cf.carvy+cf.gravity)
 local cary2=cf.cary+cf.carvy
 local yfix=0
 for p in all(cf.coll_pts) do
  -- compute point and tile
  -- relative to gem grid
  local px,py=cf.carx+p[1],
                cary2+p[2]
  if collides(cf.collmasks,px,py) then
   -- collision
   -- compute how far py can go
   -- before it hits this tile.
   local py0=cf.cary+p[2]
   local pys=(py0|0x7)\1
   if abs(pys-py)>abs(yfix) then
    yfix=pys-py
   end
  end
 end
 if yfix~=0 then
  cary2+=yfix
  -- zero velocity
  cf.carvy=0
 end
 cf.cary=cary2
 -- animate runner
 cf.runner_t=1+cf.runner_t%8
 cf.runnerx-=2
 -- did the car drive right over
 -- the pit?
 if cf.carx<-100 then
  set_next_mode("gameover",{
   reason="dig a pit to trap the cadillac!",
  })
 end
end

function cf_draw()
 -- draw bg
 bg:draw()
 -- draw board
 map(2,0,cf.bx-8,cf.by,cf.w+2,cf.h)
 local by=cf.by
 for y=1,cf.h do
  local bx=cf.bx
  for x=1,cf.w do
   spr(cf.grid[y][x],bx,by)
   bx+=8
  end
  by+=8
 end
 -- draw car
 rspr(cf.carx+11,
      cf.cary+21,cf.wheel_r,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 rspr(cf.carx+47,
      cf.cary+21,cf.wheel_r+0.17,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 if cf.damaged then
  spr(sid_car_bumper2,
   cf.carx,cf.cary+8,2,2)
  spr(sid_car+2,
   cf.carx+16,cf.cary,6,3)
 else
  spr(sid_car,cf.carx,cf.cary,8,3)
 end
 -- draw running digger
 spr(sid_running[cf.runner_t],
     cf.runnerx,cf.runnery-5*abs(sin(cf.runner_t/16)),2,2)
 -- draw dirt pile
 local dsx,dsy=sprxy(sid_dirt_pile)
 sspr(dsx,dsy,16,16,cf.dirtx,cf.by,
      16,-cf.dirth/3,false,true)
 -- draw debris particles
 for p in all(cf.debris) do
  spr(p.s,p.px,p.py)
 end
 -- debug
 print("temp: press ❎ to\nadvance to car-burying",1,1,0)
     
 --[[
 -- debug collision points
 for p in all(cf.coll_pts) do
  local px,py=p[1],p[2]
  pset(cf.carx+px,cf.cary+py,-7)
 end
 -- debug collision masks
 for row=1,16 do
  local mask=cf.collmasks[row]
  local y=(row-1)*8
  for bit=0,15 do
   if mask&(1<<bit)~=0 then
    local x=8*bit
    rect(x,y,x+7,y+7,-7)
   end
  end
 end
 --]]
end
-->8
-- car-burying
cb={}

function cb_enter(args)
 cb={
  bx=args.bx,
  by=args.by,
  w=args.w,
  h=args.h,
  grid=args.grid,
  collmasks=args.collmasks,
  dirtx=args.dirtx,
  dirth=args.dirth,
  carx=args.carx,
  cary=args.cary,
  wheel_r=args.wheel_r,
  cx=0,
  cfill=0x5555,
  phase=0,
  health=3,
  diggerx=-8,
  diggerf=true,
  digger_ag=animgraph({
   walk={anim(sid_walking,8),"walk"},
   idle_e={anim({1,33},8),"idle_e"},
   pickup={anim({3,35,11,43},4),"idle_f"},
   idle_f={anim({11,43},8),"idle_f"},
   drop={anim({11,43,3,35,33},4),"idle_e"},
  },"walk"),
  carrying=false,
  window_r={30,1,38,1},
  armx=34,
  army=7,
  targetx=0,
  targety=args.cary+8,
  targett=0,
  targetr=4,
  aimx=0,
  aimy=0,
  aimtheta=0,
  muzx=0,
  muzy=0,
  shoot_fcounts={180,60,60,20,20,20},
  shooti=6,
  shootc=0,
  reload_time=120,
  reloadc=0,
  fade_step=fade_max_step,
  panx=0,
  dpanx=0,
  dirtfalls={},
  bullets={},
  particles={},
 }
end            

function cb_update()
 bg:update(-cb.dpanx)
 if cb.phase==0 then
  -- intro cutscene, not interactive yet
  -- digger walks in, window rolls down
  cb.window_r[4]=min(7,cb.window_r[4]+0.125)
  cb.diggerx+=0.5
  if cb.diggerx>=cb.bx then
   cb.phase=1
   cb.digger_ag:to("idle_e")
  end
 elseif cb.phase==1 then
  -- regular gameplay
  -- handle cursor movement
  local dx=0
  if (btnp(⬅️)) dx-=1
  if (btnp(➡️)) dx+=1
  -- cx may range outside the board!
  local cx2=clamp(cb.cx+dx,-2,cb.w+2)
  if cx2~=cb.cx then
   cb.diggerf=cx2<cb.cx
   sfx(sfx_click,0)
  end
  cb.cx=cx2
  -- handle dirt pickup/drop
  if btnp(🅾️) then
   if not cb.carrying
      and cb.cx<=0 then
    -- pick up dirt from dirt pile
    cb.carrying=true
    cb.digger_ag:to("pickup")
    cb.dirth-=1
    sfx(sfx_select,0)
   elseif cb.carrying
          and cb.cx>=1 and cb.cx<=cb.w
          and cb.grid[1][cb.cx]==sid_empty then
    -- drop dirt
    cb.carrying=false
    cb.digger_ag:to("drop")
    sfx(sfx_dope1,0)
    if cb.grid[2][cb.cx]~=sid_empty then
     -- place road
     cb.grid[1][cb.cx]=sid_fillroad
     -- update collmask
     local row=1+cb.by\8
     local bit=(cb.bx-8+8*cb.cx)\8
     cb.collmasks[row]|=1<<bit
     -- check for victory
     local buried=true
     for x=1,cb.w do
      if cb.grid[1][x]~=sid_fillroad then
       buried=false
       break
      end
     end
     if buried
        then
      cb.phase=2
      cb.diggerx=cb.bx-12+8*cb.cx
      cb.dpanx=-0.25
      cb.digger_ag:to("walk")
     end
    else
     -- place falling dirt.
     -- figure out how far it
     -- needs to fall.
     local ecy=cb.h
     for y=2,cb.h do
      if cb.grid[y][cb.cx]~=sid_empty then
       ecy=y-1
       break
      end
     end
     add(cb.dirtfalls,{
      px=cb.bx-8+cb.cx*8,
      py=cb.by-4,
      vy=0,
      s=rnd(sid_filldirt),
      ey=ey,
      ecx=cb.cx,
      ecy=ecy,
      ey=cb.by-8+8*ecy,
     })
    end
   else
    -- invalid 🅾️ press
    sfx(sfx_cancel,0)
   end
  end
  -- dolan aiming
  local tdx,tdy=cb.bx-12+8*cb.cx,
                cb.by-12
  local aim_speed=0.03 -- 0..1, higher=faster convergence
  local aim_drift=0.006 -- lower=steadier aim
  -- target is where dolan is trying to aim
  cb.targetx+=aim_speed*(tdx-cb.targetx)
  cb.targety+=aim_speed*(tdy-cb.targety)
  cb.targett+=0.004
  -- aimx/y is where dolan is actually aiming
  cb.aimx,cb.aimy=cb.targetx+cb.targetr*sin(1.13*cb.targett),
                  cb.targety+cb.targetr*sin(0.73*cb.targett)
  -- compute current arm angle and
  -- muzzle position
  local ax,ay=cb.carx+cb.armx,
              cb.cary+cb.army
  local tx,ty=cb.aimx,cb.aimy
  cb.aimtheta=atan2(tx-ax,ay-ty)
  cb.muzx,cb.muzy=ax+7*cos(cb.aimtheta+.03),
                  ay-7*sin(cb.aimtheta+.03)
  -- dolan shooting
  cb.shootc-=1
  cb.reloadc-=1
  if cb.shootc<=0 then
   sfx(sfx_shoot,0,rnd(5)\1)
   -- reset shot timer
   cb.shooti=1+cb.shooti%#cb.shoot_fcounts
   cb.shootc=cb.shoot_fcounts[cb.shooti]
   -- reload?
   if cb.shooti==1 then
    cb.reloadc=cb.reload_time
   end
   -- recoil
   cb.targetx+=12
   -- fire bullet
   add(cb.bullets,{
    px=cb.muzx,
    py=cb.muzy,
    vx=2*cos(cb.aimtheta),
    vy=2*-sin(cb.aimtheta),
    c=7,
   })
   -- eject casing
   add(cb.particles,{
    px=cb.muzx,
    py=cb.muzy,
    vx=rnd(2)-1,
    vy=-0.1,
    c=13,
   })
  end
  -- when reload ends, reset target
  -- so he has to aim again
  if cb.reloadc==0 then
   cb.targetx,cb.targety=0,cb.cary+8
  end
 elseif cb.phase==2 then
  -- outro cutscene
  -- pan camera until pit is
  -- offscreen
  cb.panx+=cb.dpanx
  if cb.panx<-128 then
   cb.dpanx=0
  end
  -- walk until digger is offscreen
  cb.diggerx-=0.25
  if cb.diggerx<=-120 then
   cb.fade_step-=0.1
   if cb.fade_step<=0 then
    set_next_mode("victory")
   end
  else
  end
 end
 -- update falling dirt
 local dirtfalls2={}
 for df in all(cb.dirtfalls) do
  df.vy+=0.1
  df.py+=df.vy
  if df.py>=df.ey then
   -- dirt has landed.
   -- update grid
   cb.grid[df.ecy][df.ecx]=df.s
   -- update collmasks
   local row=cb.by\8+df.ecy
   local bit=(cb.bx-8+8*df.ecx)\8
   cb.collmasks[row]|=1<<bit
  else
   add(dirtfalls2,df)
  end
 end
 cb.dirtfalls=dirtfalls2
 -- update bullets
 local bullets2={}
 local plx0,ply0=cb.bx-(cb.diggerf and 4 or 12)+8*cb.cx,
                 cb.by-16
 local plx1,ply1=plx0+6,ply0+15
 for b in all(cb.bullets) do
  b.px+=b.vx
  b.py+=b.vy
  b.c=16-b.c
  local hit=false
  -- test intersection with player
  if b.px>=plx0 and b.px<=plx1 and
     b.py>=ply0 and b.py<=ply1 then
   -- hit player
   hit=true
   cb.health-=1
   if cb.health<=0 then
    set_next_mode("gameover",{
     reason="don't get shot so much!",
    })
   end
   for i=1,5 do
    add(cb.particles,{
     px=b.px,
     py=b.py,
     vx=b.vx*rnd(),
     vy=b.vy*rnd(),
     c=8,
    })
   end
  end
  -- test intersection against
  -- falling dirts
  if not hit and
     not collides(cb.collmasks,b.px,b.py) and
     b.px>-8 and b.px<128 and
     b.py>-8 and b.py<128 then
   add(bullets2,b)
  end
 end
 cb.bullets=bullets2
 -- update particles
 local particles2={}
 for p in all(cb.particles) do
  p.vy+=0.1
  p.px+=p.vx
  p.py+=p.vy
  if p.py<128 then
   add(particles2,p)
  end
 end
 cb.particles=particles2
end

function cb_draw()
 -- draw bg
 camera()
 bg:draw()
 camera(cb.panx,0)
 -- draw board
 map(2,0,cb.bx-8,cb.by,cb.w+2,cb.h)
 local by=cb.by
 for row in all(cb.grid) do
  local bx=cb.bx
  for s in all(row) do
   spr(s,bx,by)
   bx+=8
  end
  by+=8
 end
 -- draw car
 rspr(cb.carx+11,
      cb.cary+21,cb.wheel_r,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 rspr(cb.carx+47,
      cb.cary+21,cb.wheel_r+0.17,
      m_wheelx,m_wheely,m_wheelw,
      true,0.75)
 spr(sid_car_bumper2,
   cb.carx,cb.cary+8,2,2)
 spr(sid_car+2,
   cb.carx+16,cb.cary,6,3)
 -- draw car window and dolan
 clip(cb.carx+cb.window_r[1],
      cb.cary+cb.window_r[2],
      1+cb.window_r[3]-cb.window_r[1],
      1+cb.window_r[4]-cb.window_r[2])
 rectfill(cb.carx+cb.window_r[1],
          cb.cary+cb.window_r[2],
          cb.carx+cb.window_r[3],
          cb.cary+cb.window_r[4],
          -16)
 spr(sid_dolan_head,
     cb.carx+cb.window_r[1],
     cb.cary+cb.window_r[2])
 clip()
 -- draw dirt pile
 local dsx,dsy=sprxy(sid_dirt_pile)
 sspr(dsx,dsy,16,16,cb.dirtx,cb.by,
      16,-cb.dirth/3,false,true)
 if cb.phase==0 then
  -- draw walking
  spr(cb.digger_ag:nextv(),
      cb.diggerx,cb.by-16,1,2)
 elseif cb.phase==1 then
  -- draw health
  print(sub("♥♥♥",1,cb.health),
   100,4,8)
  if cb.reloadc<=0 then
   -- draw dolan arm
   local ax,ay=cb.carx+cb.armx,
               cb.cary+cb.army
   rspr(ax,ay,cb.aimtheta,
        m_armx,m_army,m_armw)
   -- draw laser sight
   fillp(0.5+rnd(0xffff)\1)
   local ldx,ldy=cb.aimx-cb.muzx,
                 cb.aimy-cb.muzy
   line(cb.muzx,cb.muzy,
        cb.muzx+20*ldx,
        cb.muzy+20*ldy,8)
   fillp()
  end
  -- draw digger
  spr(cb.digger_ag:nextv(),
      cb.bx-12+8*cb.cx,
      cb.by-16,2,2,cb.diggerf)
  -- draw dirtfalls
  for df in all(cb.dirtfalls) do
   spr(df.s,df.px,df.py)
  end
  -- draw bullets
  for b in all(cb.bullets) do
   circfill(b.px,b.py,1,b.c)
  end
  -- draw particles
  for p in all(cb.particles) do
   pset(p.px,p.py,p.c)
   pset(p.px,p.py+1,1)
  end
  -- draw cursor
  fillp(0x5c5c.8)
  if cb.carrying
     and cb.cx>=1
     and cb.cx<=cb.w then
   -- draw cursor on grid column
   local lx,ly=cb.bx+cb.cx*8-8,
               cb.by
   line(lx,ly,lx+7,ly,7)
  elseif cb.cx<=0
         and not cb.carrying then
   -- highlight dirt pile
   rect(cb.dirtx,cb.by,
        cb.dirtx+15,cb.by-16,7)
  else
   -- no visible cursor
  end
  fillp()
 elseif cb.phase==2 then
  fade(cb.fade_step)
  -- digger walks to the left
  spr(cb.digger_ag:nextv(),
      cb.diggerx,cb.by-16,1,2,true)
 end
 -- debug
 --[[
 -- debug collision masks
 for row=1,16 do
  local mask=cb.collmasks[row]
  local y=(row-1)*8
  for bit=0,15 do
   if mask&(1<<bit)~=0 then
    local x=8*bit
    rect(x,y,x+7,y+7,-7)
   end
  end
 end
 -- draw cells filled in by car
 for y=1,cb.h do
  local row=cb.grid[y]
  local ry=cb.by+8*y-8
  for x,s in pairs(row) do
   local rx=cb.bx+8*x-8
   if s==sid_invisible then
    rect(rx,ry,rx+7,ry+7,-2)
   end
  end
 end
 --]]
end
-->8
-- gameover/victory

go={}
function go_enter(args)
 go={
  reason=args.reason,
  fade_step=0,
  dfade=0.25,
  t=0,
  can_advance=false,
 }
end

function go_update()
 go.fade_step=clamp(go.fade_step+go.dfade,0,fade_max_step)
 if go.fade_step==1 then
  go.can_advance=true
 end
 if go.can_advance then
  if go.dfade>0 and btnp(🅾️) then
   go.dfade=-1*abs(go.dfade)
  elseif go.fade_step==0 then
   set_next_mode("menu")
  end
 end
end

function go_draw()
 function cprint(msg,y,c)
  print(msg,64-2*#msg,y,c)
 end
 cls(0)
 fade(go.fade_step)
 cprint("game over",56,8)
 cprint(go.reason,64,7)
 if go.can_advance then
  cprint("press 🅾️ to try again",96,7)
 end
end

--------------------

vt={}
function vt_enter(args)
 vt={
  fade_step=0,
  dfade=0.1,
  phase=0,
 }
 camera()
end

function vt_update()
 if vt.phase==0 then
  -- fade in
  vt.fade_step=min(vt.fade_step+vt.dfade,
                   fade_max_step)
  if btnp(🅾️) then
   vt.phase=1
  end
 else
  -- fade out
  vt.fade_step-=vt.dfade
  if vt.fade_step<=0 then
   set_next_mode("menu")
  end
 end
end

function vt_draw()
 fade(vt.fade_step)
 print("⁶-b⁶x8⁶y8²0     ᶜ1⁶.\0\0\0\0\0\0ナュ⁶.\0\0\0\0█◝◝◝⁶.\0\0\0ナ◝◝◝◝⁶.\0\0\0◝◝◝◝◝⁶.\0\0\0゜◝◝◝◝⁶.\0\0\0\0³?◝◝⁶.\0\0\0\0\0\0¹ᶠ  ²0⁶.\0\0 \0\0\0▮\0⁸⁶-#ᶜ2⁶.@\0\0  \0\0▮⁸⁶-#ᶜ4⁶.█ららららナナナ²0ᶜ1⁶.▮\0\0\0⁸\0\0\0⁸⁶-#ᶜ2⁶.\0\0⁸⁸\0\0\0⁴⁸⁶-#ᶜ4⁶.ᶠᶠ⁷⁷⁷⁷⁷³\n²0ᶜ5⁶.\0\0\0\0\0\0\0ナ²0ᶜ1⁶.\0\0\0\0\0\0█ら⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0¹²0ᶜ1⁶.\0\0\0ナヲ◝◝゜⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0 ⁸⁶-#ᶜa⁶.\0\0\0\0\0\0\0ら²0ᶜ1⁶.\0\0◝◝◝◝◝◜⁸⁶-#ᶜ4⁶.\0\0\0\0\0\0\0¹²0ᶜ1⁶.█ュ◝◝◝◝◝◝²1ᶜ5⁶.\0\0\0\0\0\0\0▮ ²1ᶜ2⁶.\0\0\0\0\0\0\0h⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0000²1 ²1ᶜ2⁶.\0\0\0\0\0\0\0▮⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0█⁸⁶-#ᶜ9⁶.\0\0\0\0\0\0\0`²1ᶜ4⁶.\0\0\0\0\0\0\0█⁸⁶-#ᶜa⁶.\0\0\0\0\0\0\0`²1ᶜ0⁶.ら\0\0\0\0\0\0\0⁸⁶-#ᶜ4⁶.\0\0\0\0\0\0\0²⁸⁶-#ᶜa⁶.\0\0\0\0\0\0\0ᶜ²1ᶜ0⁶.◝◝ナ█\0\0\0\0⁶.◝◝◝◝◜ナ█\0²1⁶.ᶠᶠ⁷⁷⁷⁷³\0⁸⁶-#ᶜ2⁶.▮\0\0⁸⁸\0\0\0⁸⁶-#ᶜ4⁶.ナユユユユヲヲヲ²1ᶜ0⁶.ヲヲュュュ◜◜◜⁸⁶-#ᶜ2⁶.⁴\0\0²\0\0¹¹⁸⁶-#ᶜ4⁶.³³³¹¹¹\0\0\n²1ᶜ0⁶.ᶠ??゜゜ᶠ⁷³⁸⁶-#ᶜ4⁶.\0█\0\0\0\0  ⁸⁶-#ᶜ5⁶.▮\0██き \0\0⁸⁶-#ᶜ9⁶.\0\0\0\0\0\0\0@⁸⁶-#ᶜa⁶.ナ@@@@@@\0²1ᶜ0⁶.\0¹¹\0\0\0\0\0⁸⁶-#ᶜ2⁶.\0\0\0\0\0\0\0⁴⁸⁶-#ᶜ4⁶.⁴⁸\0▮▮▮▮p⁸⁶-#ᶜ5⁶.\0²⁘\0\0\0@\0⁸⁶-#ᶜ9⁶.\0\0\0\0\0█\0\0⁸⁶-#ᶜa⁶.³⁴⁸⁸⁸⁸☉☉²1ᶜ4⁶.\0\0\0\0ehd█⁸⁶-#ᶜ5⁶.@\0@@\0²¹⁴⁸⁶-#ᶜ9⁶.\0\0\0\0²✽█@⁸⁶-#ᶜa⁶.█████\0⁸⁸²1ᶜ2⁶.\0\0\0\0⁸\0\0\0⁸⁶-#ᶜ4⁶.¹\0\0\0オ@\0d⁸⁶-#ᶜ5⁶.\0¹¹\0\0 t\0⁸⁶-#ᶜ9⁶.\0\0\0\0 「\0⁸⁸⁶-#ᶜa⁶.\0\0\0\0\0█☉█²1ᶜ2⁶.\0\0\0\0\0\0!\0⁸⁶-#ᶜ4⁶.\0\0\0\0☉t\0▮⁸⁶-#ᶜ5⁶.\0\0\0\0005¹\0\0⁸⁶-#ᶜ9⁶.\0\0\0\0@ ██⁸⁶-#ᶜa⁶.\0\0\0\0\0☉「⁸²1ᶜ2⁶.\0\0 \0¹\0\0\0⁸⁶-#ᶜ4⁶. \0\0\0\0¹¹¹⁸⁶-#ᶜ5⁶.\0 \0\0…\0@@⁸⁶-#ᶜa⁶.▮▮▮▮\0███²1ᶜ2⁶.\0\0\0\0\0⁸\0¹⁸⁶-#ᶜ4⁶.\0\0\0\0⁵¹\0⁴⁸⁶-#ᶜ5⁶.\0\0\0\0\0²\0\0⁸⁶-#ᶜ9⁶.\0\0\0\0²\0\0\0⁸⁶-#ᶜa⁶.\0\0\0\0\0⁴⁴\0²1ᶜ2⁶.█\"\0!\0\0\0\0⁸⁶-#ᶜ4⁶.\0☉🐱░\0¹\0\0⁸⁶-#ᶜ5⁶.⁴\0\0\0e\0\0\0⁸⁶-#ᶜ9⁶.\0\0@\0\0\0³³⁸⁶-#ᶜa⁶.xd⁴b²²\0\0²1ᶜ2⁶.\0\0\0\0\0\0¹⁘⁸⁶-#ᶜ4⁶.\0\0\0\0tr⁴¹⁸⁶-#ᶜ5⁶.\0\0\0\0\0⁸@@⁸⁶-#ᶜ9⁶.\0\0\0\0⁸\0\0\0⁸⁶-#ᶜa⁶.\0\0\0\0\0$\"\"²1ᶜ2⁶.▮\0\0\0\0\0\0¹⁸⁶-#ᶜ4⁶. \0\0 \0⁸@@⁸⁶-#ᶜ5⁶.█き \0⁴□\0⁴⁸⁶-#ᶜ9⁶.\0\0\0\0x@&\0⁸⁶-#ᶜa⁶.@@@@\0$\0\"²1ᶜ2⁶. \0\0\0)☉\0\0⁸⁶-#ᶜ4⁶.█☉░\0⁶\0\"\"⁸⁶-#ᶜ5⁶.⁸\0⁸██!\0\0⁸⁶-#ᶜ9⁶.⁴@\0\0\0\0\0\0⁸⁶-#ᶜa⁶.@⁴@@@fdd²1ᶜ2⁶.\0\0\0\0\0\0²(⁸⁶-#ᶜ4⁶.⁴⁴⁸⁸☉\0\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0\0h⁸🐱⁸⁶-#ᶜ9⁶.\0⁸⁴⁴\0\0ら\0⁸⁶-#ᶜa⁶.⁸\0\0\0⁴░⁴d²1ᶜ2⁶.\0\0\0\0\0@\0\0⁸⁶-#ᶜ4⁶.\0\0\0\0ᶜ¹h☉⁸⁶-#ᶜ5⁶.\0\0\0\0█²\0\0⁸⁶-#ᶜ9⁶.\0\0\0\0³⁸⁴\0⁸⁶-#ᶜa⁶.\0\0\0\0\0░█d²1ᶜ2⁶.\0\0\0\0\0\0²⁸⁸⁶-#ᶜ4⁶.\0\0\0\0¹³\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0⁴⁸⁸²⁸⁶-#ᶜ9⁶.\0\0\0\0²\0\0\0⁸⁶-#ᶜa⁶.\0\0\0\0\0⁴⁴⁴²1ᶜ2⁶.⁴⁴██🐱²\0@⁸⁶-#ᶜ4⁶.ヲヲ||||~>²1ᶜ0⁶.◜ュ\0\0\0\0\0\0\n²1ᶜ2⁶.\0\0\0\0\0█\0\0⁸⁶-#ᶜ4⁶. @@@\0p⁸\0⁸⁶-#ᶜ5⁶.\0\0\0\0@\0\0\0⁸⁶-#ᶜ9⁶.@ \0\0\0\0\0\0⁸⁶-#ᶜa⁶.\0\0    ユ\0²1ᶜ2⁶.\0▮ ²⁸\0²█⁸⁶-#ᶜ4⁶.█░\0⁸²▒¹\0⁸⁶-#ᶜ5⁶.⁘\0█き█⁴@\0⁸⁶-#ᶜ9⁶.\0\0⁴\0\0@\0\0⁸⁶-#ᶜa⁶.hhhdd²█\0²1ᶜ2⁶.\0\0\0\0²▮「◜⁸⁶-#ᶜ4⁶.█░⁴⁸⁸🐱█\0⁸⁶-#ᶜ5⁶.⁴\0█き  $¹⁸⁶-#ᶜ9⁶.@\0\0⁴\0\0\0\0⁸⁶-#ᶜa⁶.⁸hh@ddc\0²1ᶜ2⁶.\0\0²\"□²#◝⁸⁶-#ᶜ4⁶.hh██きそ⁴\0⁸⁶-#ᶜ5⁶.\0\0⁸⁸⁸■\0\0⁸⁶-#ᶜ9⁶.\0█@\0\0\0\0\0⁸⁶-#ᶜa⁶.░⁴⁴dddス\0²1ᶜ2⁶.⁴\0@\000322◝⁸⁶-#ᶜ4⁶.▮\0\0⁴deh\0⁸⁶-#ᶜ5⁶.\0⁘⁴@\0\0¹\0⁸⁶-#ᶜ9⁶.\0\0\0\0⁸⁸⁴\0⁸⁶-#ᶜa⁶.☉☉☉☉███\0²1ᶜ2⁶.@\0らもよお>○⁸⁶-#ᶜ4⁶.¹█\0@\0¹¹\0⁸⁶-#ᶜ5⁶.\0¹¹\0\0 \0█⁸⁶-#ᶜ9⁶.\0\0\0\0@\0\0\0⁸⁶-#ᶜa⁶.█\0\0\0\0@ら\0²1ᶜ2⁶.\0\0ヲヲンュュ◝⁸⁶-#ᶜ4⁶.\0²\0⁴\0\0²\0⁸⁶-#ᶜ5⁶.\0\0⁴¹⁴¹\0\0⁸⁶-#ᶜ9⁶.¹\0\0\0\0\0\0\0⁸⁶-#ᶜa⁶.\0¹³²²²¹\0²1ᶜ2⁶.\0\0ュュう█り◝⁸⁶-#ᶜ4⁶.²²²\0a⁘²\0⁸⁶-#ᶜ5⁶.\0\0\0\0\0i \0⁸⁶-#ᶜ9⁶.\0\0\0³\0\0▮\0⁸⁶-#ᶜa⁶.¹¹¹\0²\"ᶜ\0²1ᶜ2⁶.@\0アアろ░█◝⁸⁶-#ᶜ4⁶.¹□□²²ap\0⁸⁶-#ᶜ5⁶.▮\0\0\0⁸\0	\0⁸⁶-#ᶜ9⁶.²¹¹ !(\0\0⁸⁶-#ᶜa⁶.   ■▮□&\0²1ᶜ2⁶.⁴▮😐アア█▒タ⁸⁶-#ᶜ4⁶.a¹¹■¹ix\0⁸⁶-#ᶜ5⁶.\0@p\0\0⁴\0$⁸⁶-#ᶜ9⁶.\0\0²²\0▮\0\0⁸⁶-#ᶜa⁶.\"\"  2\"&\0²1ᶜ2⁶.\0\0▥▥▥■▥◝⁸⁶-#ᶜ4⁶.\"ddd\0ア\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0d\0\0\0⁸⁶-#ᶜ9⁶.d\"\"\0\0\0\0\0⁸⁶-#ᶜa⁶.\0\0\0\"\"\"f\0²1ᶜ2⁶.\0\0¹」▥■1○⁸⁶-#ᶜ4⁶. \"\"\"$(\0\0⁸⁶-#ᶜ5⁶.²\0\0\0\0█⁸█⁸⁶-#ᶜ9⁶.\0\0dd²⁶²\0⁸⁶-#ᶜa⁶.dd\0\0@@ろ\0²1ᶜ2⁶.\0🐱\0\0▥00◝⁸⁶-#ᶜ4⁶.⁸\0 \"\0웃k\0⁸⁶-#ᶜ5⁶.き(\n\0 \0\0\0⁸⁶-#ᶜ9⁶.\0\0\0\0\0²\0\0⁸⁶-#ᶜa⁶.ddddfd░\0²1ᶜ2⁶.⁴\0\0\0░▥ュ○⁸⁶-#ᶜ4⁶.\0\0\0\0\0⁶\0█⁸⁶-#ᶜ9⁶.\0\0\0\0\0\0²\0⁸⁶-#ᶜa⁶.\0\0\0\0\0\0¹\0²1ᶜ2⁶.a¹\0   \0`⁸⁶-#ᶜ4⁶.>>?゜゜゜゜゜²1 \nᶜ2⁶.\0\0\0\0█ヲュ◝⁶.らユュ◝◝◝◝◝²2ᶜ5⁶.\0\0\0\0\0\0\0?          ᶜ4⁶.らららららナナナ²2⁶.ᶠᶠᶠᶠᶠ⁷⁷⁷⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0ナ²2ᶜ1⁶.◜ら\0\0\0\0\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0?\n²2ᶜ1⁶.ユ²\0\0\0$dl⁸⁶-#ᶜ5⁶.\0ュ◝◝◝タい⧗²2ᶜ1⁶.\0\0\0\0\0\0\0²⁸⁶-#ᶜ5⁶.ユ◝◝◝◝◝◝ョ²1⁶.◝◝◝◝◝◝◝よ²1ᶜ2⁶.ら\0\0\0\0\0\0\0⁸⁶-#ᶜ5⁶.?◝◝◝◝◝◝ル²2⁶.\0\0³ᶠ◝◝◝◝⁶.\0\0\0\0○◝◝◝⁶.\0\0\0\0\0¹³⁷    ⁶.\0\0\0\0\0\0\0ナ⁶.\0\0\0\0\0ナ◝◝²2ᶜ4⁶.ナナユユユユユヲ⁸⁶-#ᶜ5⁶.\0\0\0⁸ᶠᶠᶠ⁷²1ᶜ4⁶.⁷³³³¹¹¹¹⁸⁶-#ᶜ5⁶.ヲュュ<おゆゆ~²1⁶.◝◝ュルノノノユ\n⁶.⧗❎◆゜゜よよ⁷⁶.ュュュュ◝◝◝\0⁶.よよよ○◝◝\0\0⁶.ノナユユュ\0\0\0⁶.◝◝◝◝◝\0\0\0⁶.◝◝◝◝³\0\0\0²1ᶜ2⁶.ら\0\0\0\0\0\0\0⁸⁶-#ᶜ5⁶.?◝◝◝◝\0\0\0²1ᶜ2⁶.◝◝ュナ\0\0\0\0⁸⁶-#ᶜ5⁶.\0\0³ᶠᶠ\0\0\0²1ᶜ2⁶.◝◝◝◝\0\0\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0ら\0⁴¹⁸⁶-#ᶜd⁶.\0\0\0\0\0ナヲ◜²1ᶜ2⁶.◝◝◝◝\0\0\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0゜ \0\0⁸⁶-#ᶜa⁶.\0\0\0\0\0²\0\0⁸⁶-#ᶜd⁶.\0\0\0\0\0。◝◝²1ᶜ2⁶.◝◝○ᶠ\0\0\0\0⁸⁶-#ᶜ5⁶.\0\0█ユ\0\0¹⁴⁸⁶-#ᶜd⁶.\0\0\0\0\0\0\0³²1ᶜ2⁶.⁷¹\0\0\0\0\0\0⁸⁶-#ᶜ5⁶.ヲ◜◝◝\0\0\0\0²1⁶.◝◝◝◝\0\0\0\0²1ᶜ2⁶.\0\0\0\0\0@\0\0⁸⁶-#ᶜ4⁶.ヲヲヲ||<<<⁸⁶-#ᶜ5⁶.⁷⁷⁷⬇️\0\0@b²1⁶.◝◝◝³\0\0\0\0⁶.ユヲンヲ\0\0\0\0\n     ᶜd⁶.\0\0\0\0\0\0\0█²1ᶜ5⁶.\0\0\0█ ⁸\0\0⁸⁶-#ᶜd⁶.\0\0\0\0らユ◜◝²1ᶜ5⁶.@\0\0\0\0\0\0\0⁸⁶-#ᶜd⁶.█ユュ◝◝◝◝◝²d ᶜa⁶.²²²\0\0\0⁷⁷²dᶜ1⁶.ら\0\0\0\0\0\0\0⁸⁶-#ᶜ5⁶. █\0\0\0\0\0\0²dᶜ1⁶.◝◝ュナ█\0\0\0⁸⁶-#ᶜ5⁶.\0\0\0▮@\0\0\0²dᶜ1⁶.◝◝◝◝◝ュユ\0⁸⁶-#ᶜ5⁶.\0\0\0\0\0²⁸@²dᶜ1⁶.りりりナナナナユ⁸⁶-#ᶜ4⁶.<8\0\0\0\0\0\0⁸⁶-#ᶜ5⁶.²\0 ■▮▮▮⁸⁸⁶-#ᶜ6⁶.\0²ᵉ⁶⁶⁷⁷⁷²1  \n  ²1ᶜ2⁶.\0\0\0\0\0 \0\0⁸⁶-#ᶜ4⁶.\0\0\0\0\0、◜◜⁸⁶-#ᶜ5⁶.\0\0\0\0\0@\0¹²1ᶜ4⁶.\0\0\0\0\0ヲ◝◝⁸⁶-#ᶜ5⁶.\0\0\0\0\0⁴\0\0²1ᶜ4⁶.\0\0\0\0\0\0゜?⁸⁶-#ᶜ5⁶.\0\0\0@\0⁷ @⁸⁶-#ᶜd⁶.\0\0\0█ユヲら█²1ᶜ5⁶.▮⁴¹\0\0\0\0\0⁸⁶-#ᶜd⁶.ナヲ◜◝◝◝◝◝²d   ᶜa⁶.⁷⁷⁷⁷⁷⁷⁷\0ᶜ6⁶.\0\0\0█████⁶.\0\0ᶠ◝◝◝◝◝⁶.███ナ◝◝◝◝²dᶜ1⁶.ユユら\0\0\0\0\0⁸⁶-#ᶜ5⁶.⁸⁸(⁸⁸▮ █⁸⁶-#ᶜ6⁶.⁷⁷³³⁷⁷゜?²dᶜ1⁶.◝◝◝◝ヲナ\0\0⁸⁶-#ᶜ5⁶.\0\0\0\0⁴\0█⁶²dᶜ1⁶.◝◝◝◝◝◝◝ュ⁸⁶-#ᶜ5⁶.\0\0\0\0\0\0\0²\n²1ᶜ4⁶.\0\0\0\0◝◝◝◝²1⁶.\0█ナ◜◝◝◝◝⁸⁶-#ᶜ5⁶.\0@▮¹\0\0\0\0²4   ²4⁶.\0ᶜ █\0\0\0\0⁸⁶-#ᶜd⁶.◝ユら\0\0\0\0\0²4ᶜ5⁶.\0\0\0\0¹\0⁴0⁸⁶-#ᶜd⁶.◝◝◝◝◜◜ヲら²d ᶜa⁶.\0\0\0\0\0\0\0█⁶.\0\0\0\0\0\0⁷ᶠᶜ6⁶.ららららナナナナ²6  ᶜd⁶.█\0\0\0\0\0\0\0²6ᶜ5⁶.?ヲら█████⁸⁶-#ᶜd⁶.ら⁴0\0\0\0\0\0²1ᶜ5⁶.▮a¹¹¹¹¹█⁸⁶-#ᶜd⁶.ᶠ>◜◜◜◜◜○\n²4      ⁶.█\0\0\0\0\0\0\0²4ᶜ5⁶.\0\0\0\0\0▮@\0⁸⁶-#ᶜd⁶.◝◝◜ュヲナ█\0²5ᶜa⁶.███████ら⁸⁶-#ᶜd⁶.○○○○○○?>⁸⁶-#ᶜf⁶.\0\0\0\0\0\0@\0²aᶜd⁶.ユユユユユユユユ²6⁶.ᶠᶠᶠᶠ⁷⁷⁷⁷   ²6ᶜ4⁶.\0\0\0\0████⁸⁶-#ᶜ5⁶.██らら````⁸⁶-#ᶜd⁶.\0@\0 \0\0▮▮²4ᶜ5⁶. ¹\0\0\0\0\0\0⁸⁶-#ᶜd⁶.゜\0\0\0\0\0\0\0\n²4        ²4ᶜ5⁶.²\0\0\0\0\0\0\0⁸⁶-#ᶜa⁶.らら█\0\0\0\0\0⁸⁶-#ᶜd⁶.< \0\0\0\0\0\0²4ᶜ9⁶.\0\0\0⁶\0\0\0\0⁸⁶-#ᶜa⁶.ᶠᶠᶠ\0\0\0\0\0⁸⁶-#ᶜd⁶.ユユユ\0\0\0\0\0²4ᶜ6⁶.ヲヲヲヲヲヲヲユ⁸⁶-#ᶜd⁶.⁷⁷⁷\0\0\0\0⁸²6   ²6ᶜ4⁶.█ららららナナナ⁸⁶-#ᶜ5⁶.p0000「「「⁸⁶-#ᶜd⁶.\0\0\0⁸⁸\0\0⁴²4 \n          ²4ᶜ6⁶.ユユユ\0\0\0\0\0⁸⁶-#ᶜd⁶.\0\0\0ユ\0\0\0\0²4ᶜ6⁶.◝◝◝ヲ\0\0\0\0⁸⁶-#ᶜd⁶.\0\0\0⁷\0\0\0\0²4ᶜ6⁶.◝?゜\0\0\0\0\0⁸⁶-#ᶜd⁶.\0ら\0゜\0\0\0\0²4ᶜ6⁶.◝ュ\0\0\0\0\0\0⁸⁶-#ᶜd⁶.\0³█\0\0\0\0\0²4ᶜ5⁶.ᶜᶜ⁶\0\0\0\0\0⁸⁶-#ᶜ6⁶.³¹¹\0\0\0\0\0⁸⁶-#ᶜd⁶.\0²\0\0\0\0\0\0²4 \n                \n                \n                                                             ",
  0,0)
end
__gfx__
00000000955299999999999999999999999999999999999944442444999999999999999999939999999339999999999999999999955299999559999900000000
000000009555599999999999955299999999999999bbbb9944444444999966666665999999339999993333999999999999999999955559995659999900000000
007007009fff99999999999995555999999999999bb7bbb9454444449999665555555999933399999333333995529999999999999fff99996599999900000000
000770009fff9999999999999fff9999999999999b7bbbb94444444e9996665555665599333333333333333395555999999999999fff99949999999900000000
0007700011f11999999999999fff9999999999999bbbbbb944424444996655556655559933333333999339999fff99999999999911f119499949999900000000
00700700111119999999999911f11999999999999bbbbbb954444444966555566555559993339999999339999fff199999999999111114f99999999900000000
00000000f111f99999999999111119999999999999bbbb99444444549655556555555559993399999993399991f1199999999999f1114f994999999900000000
00000000f111f999559999994111f9999999999999999999414444449655555555551559999399999993399911111999999999999f1499999999999900000000
999999994f44444466599999f411f999999999999999999955544d44965555555555155999666599aaa1111af111f99999999999954599999999999900000000
999999999ddd9f99559999999f45f999999999999988889955511424955655555551155996555559aaa1111a4111f9999999999994dd99999999999900000000
999999999d9d9999999999999dd4f99999999999988f888955554444955655555115551965555519111111119f45f999999999994d9d99999999999900000000
999999999d9d9999999999999d9d49999999499998f888895554d444956555555555551955655555111111149dd44999949999999d9d99999999999900000000
999999999d9d9999999999999d9d9499999999999888888955411444956555115555551995555155554114449d9d9499444999999d9d99999999999900000000
999999999d9d9999999999999d9d99499949999998888889551544d4995551555551119991551551551544d49d9d9944665999999d9d99999999999900000000
999999999d9d9999999999999d9d999459999999998888995555d4449991155555519999991551195555d4449d9d9999559999999d9d99999999999900000000
99999999559559999999999955955995659949999999999955541444999911511119999999911999555414445595599994999999559559999999999900000000
999999999552999999999999999999999999999999999999555555559999999900000000aaa1111a999999999999999999999999955299999999999900000000
999999999555599999999999999999999999999999222299555555559999999900000000aaa1111a999999999552999999999999955559999999999900000000
999999999fff9999999999999552999999999999922e2229555555559993393900000000111111119999999995555999999999999fff99999559999900000000
999999999fff999999999999955559999999999992e2222955555555393333330000000011111111999999999fff9999999999999fff99995659999900000000
9999999911f11999999999999fff9999999999999222222955555555999333390000000055555555999999999fff19999999999911f119996599999900000000
9999999911111999999999999fff99999999999992222229555555559999999900000000555555559999999991f1199999999999111119949999999900000000
99999999f111f9999999999911f11999999999999922229955555555999999990000000055555555999999991111199999999999f11119499999999900000000
999999994411f999999999991111199999999999999999995555555599999999000000005555555599999999f111f99994999999f111f4999999999900000000
999999999f44f999999999994111f99999999999999999994245555599999999aaa1111aaaa1111a00000000f111f999444999999f554f999999999900000000
999999999ddd449955999999f411f9999999999999aaaa99444d455599999999aaa1111aaaa1111a0000000044444444665999999df499999999999900000000
999999999d9d9944665999999f45f999999999999aa7aaa94d441555999999991111111111111111000000009ddd9999559999999d4d99999999999900000000
999999999d9d9999559999999dd4f999999999999a7aaaa944415555999939391111111141111111000000009d9d999994999999949d99999999999900000000
999999999d9d9999999999999d9d4999999999499aaaaaa94d54455593993993544654464d544555000000009d9d9999999999994d9d99999999999900000000
999999999d9d9999999999999d9d9449999949999aaaaaa944441555993999395545554544441555000000009d9d9999999499999d9d99999999999900000000
999999999d9d9999999999999d9d99944599999999aaaa9942445555999393395544444542445555000000009d9d9999999999999d9d99999999999900000000
99999999559559999999999955955999999999999999999944414555999339994444444444414555000000005595599999999999559559999999999900000000
99999999999999999999999995529999999999999999999999999999999999999999999995529999999999999552999999999999955299989999999900000000
99999999999999441999999995555999955299999999999999999999999999925599999995555999999999999555599999999999955559899999999900000000
9999999999999144449999999fff999995555999999999999999999999999955559999998ff89999999999999fff9999999999999fff89999999999900000000
99999999999aa144461199999fff99999fff99999999999999999999999f999fff9999999fff9999999999999fff9999999999999ff899999999999900000000
999999999991141444a1499911f199999fff99999999999999999999999f999fff99999911f119999999999911f119999999999911f889999999999900000000
99999999994444a144a444991111999911f199999999999999999999999ff111f111ff9911111999999999991111199999999999111889999999999900000000
999999999944444144144499f11199991111999999999999999999999999999111999f99f111f99999999999f111f99999999999ff8899999999999900000000
9999999991ad444444444449f1119999f111f99999999999999999999999999111999f99f111f999559999999f119f9999999999911899999999999900000000
9449444491a44114444a4449ff6699999f1f99999999999999999999999999911199999944444444665999999555999999999999955599999999999999999999
411441499914441a441144999ddd999996f69999999999999999999995999996669999999ddd9999559999999ddd9999999999999dd899999999999999999999
41aa144491644444411444499ddd99999ddd9999999999999999999995dddddddd9999999d9d999999999999449d9999999999999d9899999999999999999999
4494449491144414444444499d919999911d9999999999999999999999999999919999999d9d9999999999999d449999999999999d8889999999999999999999
1a441444994444444d1444499d919999991d9999999999999999999999999999919999999d9d9999999999999d9d4499559999999d9899999999999999999999
44144a4494441144444144999d91999995d19999999999999999999999999999911115999d9d9999999999999d9d9944665999999d8d88999999999999999999
944441449414aa11441144499d91999995d99999999999999999999999999999999995999d9d9999999999999d9d9999559999999d9d98995599999995529989
44444444941111144444d49995555999995599999999999999999999999999999999999955955999999999995595599999999999444444446659999985555988
a144449499999999999999999999999999999999bbbbbbbbbbbbbbbb999999925599999999999999999999999552999999999999995529989999999900000000
4444494199999999999999999999999999999999bbbbbbbbbbbbbbbb999999555599999999955299999999999555599999999999995555899989989900000000
4194114199999999993999999999999999999999bbbbbaaaaaabbbbb9999999fff99999999955559999999999fff999999999999999989998999999900000000
4a11aa4499999999993999999999999999999999bbbbaaaaaaaabbbb9999999fff999999999ff899999999999fff999999999999999899999999999900000000
4111914499999999993999999999999999999999bbbaaaaaaaaaabbb99999991f1199999899fff999999999911f1199999999999999889999999999900000000
4441144499999999393999999999999999999999bbaaaaaaaaaaaabb99999991111999999911f119999999991111119999999999988899999999999900000000
a14994a499999999333939999999993999999999bbaaaaaaaaaaaabb9999999111f999999111111999999999fff1fff999999999f88999999999999900000000
a144414499999999993339999999393999999999bbaaaaaaaaaaaabb999999f1fff9999991f111f9999999999111999999999999889999999999999900000000
9449444499999999993999999999393939999999bbaaaaaaaaaaaabb999999966699999995f119f9999999999555999999999999889999999999999900000000
4114941999999999993999999999933939999999bbaaaaaaaaaaaabb9999999ddd9999999dfd99f9999999999ddd999999999999889999999999999900000000
4a144a149999ffff993999999999993399999999bbaaaaaaaaaaaabb9999999d91999999449d99f9999999999d9d999999999999889999999999999900000000
11944194f99bffffffff999ff9bf99399999bfffbbbaaaaaaaaaabbb9999999d919999999d449999999999999d9d999999999999889999999999999900000000
4a441114ffbffffffffff9bffffff939bffbffffbbbbaaaaaaaabbbb9999999d919999999d9d4499559999999d9d999999999999988999999999999900000000
44944444fffffffffffffbffffffffffffffffffbbbbbaaaaaabbbbb9999999d919999999d9d99446659999944449999559999999d8898999999999900000000
94441a14ffffffffffffffffffffffffffffffffbbbbbbbbbbbbbbbb9999999d919999999d9d9999559999999d9d4444665999999d8d98999999999900000000
44411a1411111111111111111111111111111111bbbbbbbbbbbbbbbb999999555599999955955999999999995595599955999999444444449999999900000000
99977999999999999999999999999666666666666666666666666666666669999999999999944999000000009999900000099999999999999999666600000000
99779999999999999999999999996111111166111111111666111111111116999999999999944449000000009990000000000999999666699996666600000000
9997799999999999999999999996111c11116611c111111616611111c111116999999999999944490000000099000010100100999966ddd66666d66600000000
9977799999999999999999999961c1c11111661c11111116166111111c111169999999999999ff49000000009000000000000009966d666ddddd666600000000
997799999999999999999999961c111111116611111111161166111111111116999999999999fff900000000900100555500000996d666666666666600000000
9997999999999999999999996111111111116611111111161166111111111c16999999999999ffe90000000000100566665000009566d6666666666600000000
9999999999999999999999961111111111116611111111161116611111111111699999999999ee2900000000000056666665001095566d666666666600000000
99999999999999999999996111111111111166111111111611166611111111116999999999992229000000000000566666650000955666d66666666600000000
99779999966666666666666666666666666666666666666666666666666666666699999999999999999999990000566666650000995666666699666600000000
977799996666666666666666666666666dd6666666666dd6666666666666666666999999999999999999999901005666666501009556666d6999ddd600000000
997799996dddddddddddd66666666666666666666666666666666666666666666899999999999999999999990000056666500000555666666999999d00000000
9997779977777666666666666666666666666666666666666666666666666666689999999999999999999999900000555500000955dddd669999999900000000
9997779977666666666666666666666666666666666666666666666666666666689999999999999999999999900100010000000995dddddd9999999900000000
99979999766666666666666666666666666666666666666666666666666666666899999999999999999999999900000000010099999d99dd9999999900000000
999999996666666666666ddd66666666666666666666666666666666666666666899999999999999999999999990000010000999999999999999999900000000
999999996666666666666666d66666666666666666666666666666666666666666999999222ef999999999999999900000099999999999999999999900000000
0000000066666666666666666d66666666666666666666666666dddddd6666666699999999995559999999999999999999999999999999999999999900000000
0000000066666666ddddddd6666666666666666666666666666d999999d666666699999999999999999999999999999999999999999999999999999900000000
000000006666666d9999999d66666666666666666666666666d99999999d66666699999999999999999955999999999999999999999999999999999900000000
000000009d6666d999999999d666666666666666666666666d9999999999ddddddd9999999999999995555599949999999999999999999999999999900000000
0000000099d6dd99999999999dddddddddddddddddddddddd5999999999995ddddd9999999999999555555999499999999999449999999999999999900000000
000000009995dd999999999999555555555555555555555555999999999995dddd59999999999999955559999949999999994999999999999999999900000000
00000000999955999999999999999999999999999999999999999999999995555599999999999999999999999999999999449999999999999999999900000000
00000000999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999999999999999999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999999999999949999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999999999999994999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999999999999994999949999999999999999999900000000
0000000000000000000000000000000000000000000000000000000000000000000000009999999955555599999999999944499999999999fff1199900000000
000000000000000000000000000000000000000000000000000000000000000000000000999999999555555599999999999449999999dd6ff1111f8500000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999955599999999999499999dddddd6f11111f8500000000
00000000000000000000000000000000000000000000000000000000000000000000000099999999999999999999999999999999dddddd61111118f500000000
__label__
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc7777777777777cccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc777777777777777ccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccc77777777777777cc7777777777777777ccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccc77777777777777777777777777777777cccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccccccccccccc6777777777777777cc777777777777ccccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccccccccccccc77777777777777ccccc7777777777cccccccccccccccccccccccccccccccccccccccccccc
7777766ccccccccccccccccccccccccccccc9999cccccc9999cc99c77777999999779999cccccc99cccccc9999cccccccccccccccccccccccccccccccccccccc
77777776cccccccccccccccccccccccccccc99991ccccc99991c991c77779999991799991ccccc991ccccc99991ccccccccccccccccccccccccccccccccccccc
77777777cccccccccccccccccccccccccccc991199cc99c1991c991ccc779911991c991199cc99c11ccc99c1111ccccccccccccccccccccccccccccccccccccc
77777777cccccccccccccccccccccccccccc991c991c991c991c991ccccc991c991c991c991c991ccccc991ccccccccccccccccccccccccccccccccccccccccc
7777777ccccccccccccccccccccccccccccc991c991c991c991c991ccccc9999991c991c991cc11ccccc999999cccccccccccccccccccccccccccccccccccccc
77777ccccccccccccccccccccccccccccccc991c991c991c991c991ccccc9999991c991c991ccccccccc9999991ccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccc991c991c991c991c991ccccc9911991c991c991cccccccccc111991ccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccc991c991c991c991c991ccccc991c991c991c991ccccccccccccc991ccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccc9999991c9999c11c999999cc991c991c991c991ccccccccc9999c11ccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccc9999991c99991ccc9999991c991c991c991c991ccccccccc99991ccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccc111111cc1111cccc111111cc11cc11cc11cc11cccccccccc1111ccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccc9999cc999999cc9999cccc999999cc99cccccc99cccccc999999cccc9999cccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccc99991c9999991c99991ccc9999991c991ccccc991ccccc9999991ccc99991ccccccccccccc67777777cccccccccccc
ccccccccc777777777777ccccccccccc99c1111c9911991c991199ccc199111c991ccccc991ccccc9911991c99c1111cccccccccccc77777777777cccccccccc
ccccccc777777777777777cccccccccc991ccccc991c991c991c991ccc991ccc991ccccc991ccccc991c991c991ccccccccccccccc7777777777777ccccccccc
cccccc7777777777777777cccccccccc991ccccc9999991c991c991ccc991ccc991ccccc991ccccc9999991c991ccc77777777ccccc77777777777cccccccccc
ccccccc77777777777777ccccccccccc991ccccc9999991c991c991ccc991ccc991ccccc991ccccc9999991c9917777777777777cccc67777777cccccccccccc
ccccccc67777777777766ccccccccccc991ccccc9911991c991c991ccc991ccc991ccccc991ccccc9911991c99177777777777777ccccccccccccccccccccccc
cccccccc666666666666cccccccccccc991ccccc991799179917991ccc991ccc991ccccc991ccccc991c991c99177777777777777ccccccccccccccccccccccc
cccccccccc66666666ccccccccccccccc19999cc9917991799999917999999cc999999cc999999cc991c991cc199997777777777cccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccc99991c99179917999999179999991c9999991c9999991c991c991ccc99991777777777cccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccc1111cc117711771111116c111111cc111111cc111111cc11cc11cccc111177777777ccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccc777777777777766ccccccccccccccccccccccccccccccccccccc7777777ccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccc777777777777766ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccc7777777777766cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccc777777766cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccc777777776cccccccccccccccccccccc66666666666666666666666666666666ccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccc777777777777777cccccccccccccccc6111111166111111111666111111111116cccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccc77777777777777777cccccccccccccc6111c11116611c111111616611111c111116ccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccc77777777777777777ccccccccccccc61c1c11111661c11111116166111111c11116ccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccc7777777777777777ccccccccccccc61c111111116611111111161166111111111116cccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccc77777777777ccccccccccccccccc6111111111116611111111161166111111111c16cccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccc777777777ccccccccccccccccc611111111111166111111111611166111111111116cccccccccccccccccccccccccccccccc77777
cccccccccccccccccccccccc7777777ccccccccccccccccc6111111111111166111111111611166611111111116ccccccccccccccccccccccccccccccc777777
ccccccccccccccccccccccccccccccccccc666666666666666666666666666666666666666666666666666666666cccccccccccccccccccccccccccccc777777
cccccccccccccccccccccccccccccccccc6666666666666666666666666dd6666666666dd6666666666666666666ccccccccccccccccccccccccccccccc77777
cccccccccccccccccccccccccccccccccc6dddddddddddd666666666666666666666666666666666666666666668ccccccccccccccccccccccccccccccc66666
cccccc3ccccccccccccccccccccccccccc7777766666666666666666666666666666666666666666666666666668cccccccccc3cccccccccccccccccccc66666
cccccc3ccccccccccccccccccccccccccc7766666666666666666666666666666666666666666666666666666668cccccccccc3ccccccccccccccccccccc6666
cccccc3ccccccccccccccccccccccccccc7666666666666666666666666666666666666666666666666666666668cccccccccc3cccccccccccccccccccccc666
cccc3c3ccccccccccccccccccccccccccc6666666666666ddd666666666666666666666666666666666666666668cccccccc3c3ccccccccccccccccccccccccc
cccc333c3ccccccccc3ccccccccccccccc6666666666666666d66666666666666666666666666666666666666666cccccccc333c3ccccccccc3ccccccccccccc
cccccc333ccccccc3c3ccccccccccccccc66666666666666666d66666666666666666666666666dddddd66666666cccccccccc333ccccccc3c3ccccccccccccc
cccccc3ccccccccc3c3c3ccccccccccccc66666666ddddddd6666666666666666666666666666d010000d6666666cccccccccc3ccccccccc3c3c3ccccccccccc
cccccc3cccccccccc33c3ccccccccccccc6666666d0000500d66666666666666666666666666d10005001d666666cccccccccc3cccccccccc33c3ccccccccccc
ffffcc3ccccccccccc33ccccccccccccfffd6666d105666500d666666666666666666666666d0005665500dddddddcccffffcc3ccccccccccc33cccccccccccc
ffffffffcccffcbfcc3cccccbffffccbffffd6dd00566666000dddddddddddddddddddddddd5000566660015dddddccbffffffffcccffcbfcc3cccccbffffccb
fffffffffcbffffffc3cbffbffffffbffffff5dd00066666010f555555555555555555555555005666665005dddd5fbffffffffffcbffffffc3cbffbffffffbf
fffffffffbffffffffffffffffffffffffffff55000666665000fffffbfffffffffffffffff01006666500055555fffffffffffffbffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffff00056665000fffffffffffffffffffffffff00055665010fffffffffffffffffffffffffffffffffffffffff
11111111111111111111111111111111111111110001500000011111111111111111111111110000050000011111111111111111111111111111111111111111
aaa1111aaaa1111aaaa1111aaaa1111aaaa1111aa000000010a1111aaaa1111aaaa1111aaaa110000000001aaaa1111aaaa1111aaaa1111aaaa1111aaaa1111a
aaa1111aaaa1111aaaa1111aaaa1111aaaa1111aaa0000000aa1111aaaa1111aaaa1111aaaa111001000011aaaa1111aaaa1111aaaa1111aaaa1111aaaa1111a
11111111111111111111111111111111111111111111011111111111111111111111111111111111100111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555777577757775577557755555577777555555777557755555577577757775777577755555555555555555555555555555555
55555555555555555555555555555707070707000750075005555770007755555570075705555750057007070707057005555555555555555555555555555555
55555555555555555555555555555777077507755777577755555770757705555570570705555777557057770775057055555555555555555555555555555555
55555555555555555555555555555700070757005507050705555770507705555570570705555507057057070707557055555555555555555555555555555555
55555555555555555555555555555705570707775775077505555577777005555570577505555775057057070707057055555555555555555555555555555555
55555555555555555555555555555505550505000500550055555550000055555550550055555500555055050505055055555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555

__gff__
0000000000000001010000000000000002000000000000010101000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
29291a0606060606060606060639292961626364616263646162616263646162000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262671727374717273747172717273747172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262629292929292929292929292929292929000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
26261606060606060606060606362626008b8c00009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
26261606060606060606060606362626009b9c0000a900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626160606060606060606060636262600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
01010400183501f350283503035000000000000000000000000000000000000000000100029000280002600021000200001e00002000030000400004000000000000000000000000000000000000000000000000
000200001835018350183501f3501f3501c3401c3101c310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200001835018350183501335013350103401031010310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
19060c00184501d4401f44024430184201d4201f41024410184001d4001f400244000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020f003f67038660306502b650246501e65015640116400e6400c64009640066300563002620006100060000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800001c753000030000000000000000000000000000003c63500000000000000000000000000000000000000000000000000000001c7530000000000000003c63500000000000000000000000000000000000
001000000c120001200c1200012011120051201112005120101200412010120101200412010120141201412000000000000000000000000000000000000000000000000000000000000000000000000000000000
48020020056100e610046100361011610036100561005610066101061006610076100761008610086100861013610076100761008610086100861013610076100961009610096100961013610076100661006610
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05181800181501814018140181450c100181401815018140181401815018140131401815018140181401815018140131401816018160181601816518100181000010000100001000010000100001000010000100
011818001f4501f4401f4401f445134001f4401f4501d4401f440214501f4401d4401f4501d4401f440214501f4401d4402446024460244602446524400244000040000400004000040000400004000040000400
011818001c2501c2401c2401c245002001c2401c2501c2401c2401d2501c2401a2401c2501c2401c2401d2501c2401a2401c2601c2601c2601c2651c2001c2000020000200002000020000200002000020000200
__music__
03 41420407
03 41050407
00 41787a79

